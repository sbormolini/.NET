#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","aliases":[]},{"name":"vscode","languageName":null,"aliases":["frontend"]}]}}

#!markdown

# Language-Integrated Query (LINQ)
Language-Integrated Query (LINQ) provides language-level querying capabilities, and a higher-order function API to C#, that enable you to write expressive declarative code.

[LINQ in C# Reference](https://docs.microsoft.com/en-us/dotnet/csharp/linq/linq-in-csharp)


| Method	    | Function  |
| -----         | -----     |
| Where	        | Filter a collection |
| Select	    | Transform every element of a collection |
| Any	        | Check if a collection is empty |
| All	        | Check if every element satisfies a condition |
| Count	        | Count all elements of a collection |
| Distinct	    | Find the unique elements of a collection |
| GroupBy	    | Group the elements of a collection based on a key |
| OrderBy	    | Sort a collection based on a key |
| First	        | Find the first element of a collection. Throw if the collection is empty |
| FirstOrDefault |	Same as First, but it returns a default value if it’s empty |
| Last	        | Find the last element of a collection. Throw if the collection is empty |
| LastOrDefault	| It returns a default value if it’s empty, instead |
| Single	    | Find only one element in a collection matching a condition. Throw, otherwise |
| SingleOrDefault |	It returns a default value if there isn’t one matching element, instead |
| Take	        | Pick the first n consecutive elements of a collection |
| TakeWhile	    | Pick the first consecutive elements that satisfy a condition |
| Skip	        | Return a collection without the first n consecutive elements |
| SkipWhile	    | Return a collection without the first consecutive elements that satisfy a condition |
| Sum	        | Sum the elements of a collection |
| Min, Max	    | Find the smallest and largest element of a collection |
| ToDictionary	| Convert a collection into a dictionary |

#!csharp

using System;
using System.Collections.Generic;
using System.Linq;

public record Movie(string Name, int ReleaseYear, float Rating);

public class Demo
{
    public static void ShowResult(IEnumerable<Movie> result)
    {
        foreach (Movie movie in result)
        {
            Console.WriteLine(movie.Name);
        }
    }

    public static void ShowName(IEnumerable<string> names)
    {
        foreach (string name in names)
        {
            Console.WriteLine(name);
        }
    }
}

#!csharp

// setup data
new List<Movie> movies = new()
{
    new Movie("Titanic", 1998, 4.5f),
    new Movie("The Fifth Element", 1995, 4.6f),
    new Movie("Terminator 2", 1999, 4.7f),
    new Movie("Avatar", 2010, 5),
    new Movie("Platoon", 1986, 4),
    new Movie("My Neighbor Totoro", 1988, 5)
};

#!csharp

// method: Where() => filter a collection
var favorites = movies.Where(movie => movie.Rating > 4.5);
Demo.ShowResult(favorites);

#!csharp

// method: Select() => you can transform every element of a collection
var favorites = movies.Where(movie => movie.Rating > 4.7)
                      .Select(movie => movie.Name);

Demo.ShowName(favorites);

#!csharp

// method: Any() => method check if a collection is empty
// Tip: Do movies.Any() instead of movies.Count() > 0
var hasAnyMovies = movies.Any();
// true

var hasBadMovies = movies.Any(movie => movie.Rating < 2);
// false

#!csharp

// method: All() => check if every elements inside a collection matches a condition
var weHaveSeenReallyGoodMovies = movies.All(movie => movie.Rating >= 4.5);
// false

#!csharp

// method: GroupBy() => groups the elements of a collection based on a key
var groupedByRating = movies.GroupBy(movie => movie.Rating);

foreach (var group in groupedByRating)
{
    Console.WriteLine($"Rating: {group.Key}");

    foreach (var movie in group)
    {
        Console.WriteLine($"{movie.Name}");
    }
    Console.WriteLine();
}

#!csharp

// allows you to transform each group
var groupedByRating = movies.GroupBy(
    movie => movie.Rating,
    (rating, movies) => new { Rating = rating, Count = movies.Count() });

foreach (var group in groupedByRating)
{
    Console.WriteLine($"{group.Rating}: [{group.Count}]");
}

#!csharp

// method: First/FirstOrDefault() => return the first element in a collection
var oldest = movies.OrderBy(movie => movie.ReleaseYear)
                   .First();

// single object no IEnumerable
Console.WriteLine(oldest.Name);

#!csharp

using System;
using System.Collections.Generic;
using System.Linq;

int[] range = {1,2,3};

range = range.Reverse().ToArray();

// output
foreach (int value in range)
    Console.WriteLine(value);

#!csharp

// flatten collections
var numbers = new []
{
    new [] {1, 2, 3},
    new [] {4, 5, 6},
    new [] {7, 8, 9}
};

var values = numbers.SelectMany(_ => _).ToList();

#!csharp

public abstract class Animal { /*...*/ }
public class Cat : Animal { /*...*/ }
public class Dog : Animal { /*...*/ }
// ...
var animals = new List<Animal>();
animals.Add(new Cat("Garfield"));
animals.Add(new Cat("Mr. Fluffy"));
animals.Add(new Dog("Spike"));
animals.Add(new Dog("Bingo"));

animals.OfType<Dog>(); // only contains Spike and Bingo

#!csharp

var numbers = new[] { 1, 2, 3, 4, 5, 6 };
numbers.SkipUntil(x => x > 3).ToArray(); // [4, 5, 6]

#!csharp

var numbers = new[] { 1, 2, 3, 4, 5, 6 };
numbers.TakeWhile(x => x < 4).ToArray(); // [1, 2, 3]

#!csharp

// https://www.geodanila.com/article/useful-linq-extension-methods/
var colors = new[] { "yellow", "green", "red", "teal", "blue", "orange", "violet" };

colors
    .OrderBy(x => x.Length)
    .ThenByDescending(x => x)
    .ToArray();
// [ "red", "teal", "blue", "green", "yellow", "violet", "orange" ]

#!csharp

public static class EnumerableExtensions
{
    public static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> items, Func<T, TKey> property)
    {
        return items.GroupBy(property).Select(x => x.First());
    }
}

class Person
{    
    public string Name { get; set; }    
}

var persons = new[] {
    new Person { Name = "George" },
    new Person { Name = "John" },
    new Person { Name = "George" }
};

persons.DistincyBy(x => x.Name); // Will only contain the first 2 objects

#!csharp

// https://blexin.com/en/blog-en/linq-in-depth-advanced-features/
var methodSyntaxGoldenCustomers = customers.Select(customer => new //anonymous type
  {
    YearsOfFidelity = GetYearsOfFidelity(customer),
    Name = customer.CustomerName
  })
 .Where(x => x.YearsOfFidelity > 5)
 .OrderBy(x => x.YearsOfFidelity)
 .Select(x => x.Name);

#!csharp

record Pet(Species Species, int Weight);
enum Species { Unkown, Cat, Dog };

var pets = new Pet[] {
    new(Species.Cat, 20), new(Species.Dog, 60)
    new(Species.Dog, 99), new(Species.Cat, 16)
};

var weightBySpecies = pets.GroupBy(p => p.Species)
                          .Select(s => new{ 
                              Species = s.Key, 
                              TotalWeight = s.Sum(p => p.Weight)
                        }).ToList()

#!csharp

// .net 6

var numbers = new[]{
    1,2,3,
    4,5,6,
    7,8,9
};

// result is 1
var first = numbers[0];
Console.WriteLine($"first element: {first}");

// result is 9
var last = numbers[^1];
Console.WriteLine($"first element: {last}");

#!markdown

Simplified ordering with System.LINQ
https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-7/

#!csharp

// Previously, you had to call OrderBy/OrderByDescending by referencing the own value.
var data = new[] { 2, 1, 3 };
var sorted = data.OrderBy(static e => e);
var sortedDesc = data.OrderByDescending(static e => e);

// now with .net 7
var data = new[] { 2, 1, 3 };
var sorted = data.Order();
var sortedDesc = data.OrderByDescending();

#!csharp

var cars = new[] {
    new { Manufacture = "Audi", Model = "A6" },
    new { Manufacture = "Porsche", Model = "911" }
};

// dot notation
var audis = cars.Where(c => c.Manufacture == "Audi").OrderByDescending(c => c.Model);

// query syntax
var porsches = from c in cars where c.Manufacture == "Porsche" orderby c.Model descending select c;

#!csharp

public record Person(string FullName, DateOnly Birthday);

var people = new []
{
    new Person("Sandro Bormolini", new DateOnly(1986, 12, 2)),
    new Person("Marco Bormolini", new DateOnly(1987, 11, 21)),
    new Person("Arno Bormolini", new DateOnly(1956, 9, 12))
};

var canDrinkv1 = people
    .Where(p => DateTime.Now.Year - p.Birthday.Year > 21)
    .OrderByDescending(p => DateTime.Now.Year - p.Birthday.Year);

var canDrinkv2 = from p in people
    where DateTime.Now.Year - p.Birthday.Year > 21
    orderby DateTime.Now.Year - p.Birthday.Year descending
    select p;

// performance impact and more allocation
var canDrinkv3 = from p in people
    let age = DateTime.Now.Year - p.Birthday.Year
    where age > 21
    orderby age descending
    select p;

#!markdown

chunk collection
source: @MilanJovanovic

#!csharp

// .NET 5<
public IEnumerable<T[]> OldChunk<T>(IEnumerable<T> enumerable, int size)
{
    while (enumerable.Any())
    {
        yield return enumerable.Take(size).ToArray();
        enumerable = enumerable.Skip(size);
    }
}

// .NET 6
public IEnumerable<T[]> BetterChunk<T>(IEnumerable<T> enumerable, int size)
{
    return enumerable.Chunk(size);
}

#!markdown

##### Enumerable.Zip Method
https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.zip?view=net-8.0

#!csharp

// code source: @StasYakhnenko
public void PrintCoordinates(double[] xCoords, double[] yCoords)
{
    // Zip combines two sequences into one where each element is a tuple, constructed from two elements
    foreach (var (x, y) in xCoords.Zip(yCoords))
    {
        Console.WriteLine($"Coordinate. X={x} Y={y}");
    }
}
