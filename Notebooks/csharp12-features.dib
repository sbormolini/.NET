#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

Primary Constructors
https://steven-giesel.com/blogPost/a210c97e-fe68-45de-afa1-d053d75f6f7d
https://www.youtube.com/watch?v=hcCT5J-SKEA

#!csharp

// old 
using System;

Console.WriteLine("Sali zäme");

public class UserService
{
    private readonly IUserRepository _repo;

    public UserService(IUserRepository repo) => _repo = repo;
    public void CreateUser() => _repo.CreateUser();
}

public interface IUserRepository
{
    void CreateUser();
}

#!csharp

var logger = new Logger();
var sandro = new Person("Sandro", "Bormolini");
sandro.PrintName(logger);

public class Person
{
    public string? FirstName { get; }
    public string? LastName { get; }
    public string FullName => $"{FirstName} {LastName}";

    public Person(string firstName, string lastName)
    {
        FirstName = firstName;
        LastName = lastName;
    }

    public void PrintName(ILogger logger)
    {
        logger.Log(FullName);
    }
}

public interface ILogger
{
    void Log(string message);
}

public class Logger : ILogger
{
    public void Log(string message) => Console.WriteLine(message);
}

#!csharp

// Primary Constructors - simple
using System;

Console.WriteLine("Sali zäme");

public class UserService(IUserRepository repo)
{
    public void CreateUser() => repo.CreateUser();
}

public interface IUserRepository
{
    void CreateUser();
}

#!csharp

// Primary Constructors - person
var logger = new Logger();
var sandro = new Person("Sandro", "Bormolini", logger);
sandro.PrintName();

public class Person(string firstName, string lastName, ILogger logger)
{
    // public Person(Ilogger l) : this("Sandro", "Bormolini", l)
    // {}
    public string FullName => $"{firstName} {lastName}";

    public void PrintName() => logger.Log(FullName);
}

public interface ILogger
{
    void Log(string message);
}

public class Logger : ILogger
{
    public void Log(string message) => Console.WriteLine(message);
}

#!markdown

#### Primary Constructor Dependency Injection
https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/primary-constructors
source code: https://www.youtube.com/shorts/SL9PRpT5-Yk

#!csharp

internal sealed class GlobalExceptionHandler(ILogger<GlobalExceptionHandler> _logger) : IExceptionHandler
{
    public async ValueTask<bool> TryHandleAsync(
        Exception exception, 
        HttpContext httpContext, 
        CancellationToken cancellationToken)
    {
        _logger.LogError(exception, "An unhandled exception has occurred while executing the request");

        var problemDetails = new ProblemDetails
        {
            Title = "An error occurred while processing your request.",
            Status = StatusCodes.Status500InternalServerError
        };

        httpContext.Response.StatusCode = problemDetails.Status.Value;

        await httpContext.Response.WriteAsJsonAsync(problemDetails, cancellationToken: cancellationToken);

        return true;
    }
}

#!markdown

#### Default lambda parameters
https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#default-lambda-parameters

#!csharp

var increment = (int value, int inc = 1) => value + inc;
Console.WriteLine(increment(10, 2));
