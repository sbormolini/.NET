#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-dev-guide-sas?tabs=csharp

#!csharp

using System;
using System.Globalization;
using System.Net;
using System.Security.Cryptography;
using System.Text;

public static string GenerateIoTSasToken(
    string resourceUri, 
    string key, 
    string policyName, 
    int expiryInSeconds = 3600)
{
    TimeSpan fromEpochStart = DateTime.UtcNow - new DateTime(1970, 1, 1);
    string expiry = Convert.ToString((int)fromEpochStart.TotalSeconds + expiryInSeconds);

    string stringToSign = WebUtility.UrlEncode(resourceUri) + "\n" + expiry;

    HMACSHA256 hmac = new HMACSHA256(Convert.FromBase64String(key));
    string signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));

    string token = String.Format(
        CultureInfo.InvariantCulture, 
        "SharedAccessSignature sr={0}&sig={1}&se={2}",
        WebUtility.UrlEncode(resourceUri), 
        WebUtility.UrlEncode(signature), 
        expiry);

    if (!String.IsNullOrEmpty(policyName))
    {
        token += "&skn=" + policyName;
    }

    return token;
}

#!markdown

#### Using Azure Maps
https://learn.microsoft.com/en-us/azure/azure-maps/

#!csharp

using SampleApp.Common.Models.Weather;
using System;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Text.Json;

namespace SampleApp.Services;

public class WeatherService : IWeatherService
{
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly string _baseUri = "https://atlas.microsoft.com/weather/currentConditions/";
    private readonly string _apiKey;

    public WeatherService(IHttpClientFactory httpClientFactory, string apiKey)
    {
        _httpClientFactory = httpClientFactory;
        _apiKey = apiKey;
    }

    public async Task<WeatherResult> GetWeatherAsync(string query)
    {
        var httpClient = _httpClientFactory.CreateClient("WeatherClient");

        httpClient.BaseAddress = new Uri($"{_baseUri}");
        var response = await httpClient.GetAsync($"json?api-version=1.1&query={query}&subscription-key={_apiKey}");
        var content = await response.Content.ReadAsStringAsync();

        var weatherApiData = JsonSerializer.Deserialize<WeatherApiResponse>(content);

        return weatherApiData.results.FirstOrDefault(); ;
    }
}
