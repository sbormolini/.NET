#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

#### Mapster
https://github.com/MapsterMapper/Mapster
source code: Muhammad Waseem

#!csharp

public class StudentDTO
{
    public int Id { get; set; }
    public string? Name { get; set; }
    public string? Email { get; set; }
}

public class StudentEntity
{
    public int StudentId { get; set; }
    public string? StudentName { get; set; }
    public string? StudentEmail { get; set; }
}

// using
using (SomeDbContext context)
{
    var students = context.Students
        .ProjectToType<StudentDTO>()
        .ToList();
}

#!markdown

#### Parsing websites in C# with Html Agility Pack or AngleSharp
source: https://blog.elmah.io/parsing-websites-in-c-with-html-agility-pack-or-anglesharp/
https://www.nuget.org/packages/HtmlAgilityPack/

#!csharp

var httpClient = new HttpClient
{
    BaseAddress = new Uri("https://books.toscrape.com/")
};
var response = await httpClient.GetAsync("/");
var content = await response.Content.ReadAsStreamAsync();

var htmlDocument = new HtmlDocument();
htmlDocument.Load(content);

var selections = new Dictionary<string, string>();

var books = htmlDocument.DocumentNode.SelectNodes("//article[@class='product_pod']");
foreach (var book in books)
{
    var anchor = book.SelectSingleNode("div[1]/a");
    var href = anchor.GetAttributeValue("href", string.Empty);

    var image = anchor.SelectSingleNode("img[@class='thumbnail']");
    var alt = image.GetAttributeValue("alt", string.Empty);

    selections.Add(alt, href);
}

#!markdown

#### SignalR
SignalR is an open-source library that simplifies adding <b>real-time web functionality</b> to apps. It enables server-side code to push content to clients instantly. SignalR hubs can be written in C# code and added to your ASP.NET app, alongside your pages and APIs. The simple programming model integrates seamlessly with other ASP.NET features like dependency injection, authentication, authorization, and scalability12.

SignalR was built for high performance and is one of the fastest real-time frameworks around. It can scale out across servers with built-in support for using Redis, SQL Server, or Azure Service Bus to coordinate messages between each instance1.
<br>
https://dotnet.microsoft.com/en-us/apps/aspnet/signalr
<br>
source: https://www.youtube.com/shorts/2i-HxCgIEuI @MilanJovanovicTech

#!csharp

public sealed class ChatHub : Hub<IChatClient>
{
    public async Task SendNotification(string message)
    {
        await Clients.All.ReceiveNotification(message);
    }
}

public interface IChatClient
{
    Task ReceiveNotification(string message);
}

#!markdown

#### SignalR - IHubContext
The SignalR hub is the core abstraction for sending messages to clients connected to the SignalR server. It's also possible to send messages from other places in your app using the IHubContext service. 
<br>
https://learn.microsoft.com/en-us/aspnet/core/signalr/hubcontext?view=aspnetcore-7.0
<br>
source: https://www.youtube.com/shorts/f6NchpcCAho @MilanJovanovicTech

#!csharp

app.MapPost(
    "broadcast", 
    async(string message, IHubContext<ChatHub, IChatClient> context) => 
{
    await context.Clients.All.ReceiveNotification(message);
    return Results.NoConent();
});

#!markdown

# Quest PDF
QuestPDF is an open-source .NET library for PDF generation. Utilizing several new patterns and practices, QuestPDF seeks to resolve the challenges inherent in this process.
https://www.questpdf.com/
source: https://www.youtube.com/shorts/FDuUvAXg-xI

#!csharp

using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

// code in your main method
Document.Create(container =>
{
    container.Page(page =>
    {
        page.Size(PageSizes.A4);
        page.Margin(2, Unit.Centimetre);
        page.PageColor(Colors.White);
        page.DefaultTextStyle(x => x.FontSize(20));
        
        page.Header()
            .Text("Hello PDF!")
            .SemiBold().FontSize(36).FontColor(Colors.Blue.Medium);
        
        page.Content()
            .PaddingVertical(1, Unit.Centimetre)
            .Column(x =>
            {
                x.Spacing(20);
                
                x.Item().Text(Placeholders.LoremIpsum());
                x.Item().Image(Placeholders.Image(200, 100));
            });
        
        page.Footer()
            .AlignCenter()
            .Text(x =>
            {
                x.Span("Page ");
                x.CurrentPageNumber();
            });
    });
})
.GeneratePdf("hello.pdf");
