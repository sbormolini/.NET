#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!markdown

Create Graph client using Managed identity<br>
Source: https://learn.microsoft.com/en-us/azure/app-service/scenario-secure-app-access-microsoft-graph-as-app?tabs=azure-powershell

#!csharp

// Create the Graph service client with a ChainedTokenCredential which gets an access
// token using the available Managed Identity or environment variables if running
// in development.
var credential = new ChainedTokenCredential(new ManagedIdentityCredential(), new EnvironmentCredential());
var token = credential.GetToken(new Azure.Core.TokenRequestContext(new[] { "https://graph.microsoft.com/.default" }));
var accessToken = token.Token;

log.LogInformation("Authenticate to MS Graph with Managend Identity");
var graphServiceClient = new GraphServiceClient(
    new DelegateAuthenticationProvider((requestMessage) =>
    {
        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("bearer", accessToken);
        return Task.CompletedTask;
    }));

#!markdown

Get users from Graph client<br>
Source: https://learn.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http

#!csharp

// MSGraphUser is a DTO class being used to hold User information from the graph service client call
List<MSGraphUser> msGraphUsers = new();
try
{
    log.LogInformation("Get users from MS Graph API");
    var users = await graphServiceClient.Users.Request().GetAsync();
    foreach (var u in users)
    {
        MSGraphUser user = new()
        {
            userPrincipalName = u.UserPrincipalName,
            displayName = u.DisplayName,
            mail = u.Mail,
            jobTitle = u.JobTitle
        };

        msGraphUsers.Add(user);
    }
}
catch (Exception ex)
{
    string msg = ex.Message;
}

public class MSGraphUser
{
    public string id { get; set; }
    public string userPrincipalName { get; internal set; }
    public string displayName { get; internal set; }
    public string givenName { get; set; }
    public string surName { get; set; }
    public string mail { get; internal set; }
    public string jobTitle { get; internal set; }
    public bool accountEnabled { get; set; }
}

#!markdown

Add object to group<br>
Source: https://learn.microsoft.com/en-us/graph/api/group-post-members?view=graph-rest-1.0&tabs=csharp

#!csharp

// add member
GraphServiceClient graphClient = new GraphServiceClient( authProvider );

var directoryObject = new DirectoryObject
{
	Id = "{id}"
};

await graphClient.Groups["{group-id}"].Members.References
	.Request()
	.AddAsync(directoryObject);

#!markdown

Assign role
Source: https://learn.microsoft.com/en-us/azure/active-directory/roles/custom-assign-graph

#!csharp

POST https://graph.microsoft.com/v1.0/deviceManagement/roleDefinitions/{roleDefinitionId}/roleAssignments
Content-type: application/json
Content-length: 193

{
  "@odata.type": "#microsoft.graph.roleAssignment",
  "displayName": "Display Name value",
  "description": "Description value",
  "resourceScopes": [
    "Resource Scopes value"
  ]
}

#!markdown

Create invitation<br>
Source: https://learn.microsoft.com/en-us/graph/api/invitation-post?view=graph-rest-1.0&tabs=http

#!csharp

// invitate user
var invitation = Invitation
{
	InvitedUserEmailAddress = "admin@fabrikam.com",
	InviteRedirectUrl = "https://myapp.contoso.com"
};

await graphServiceClient.Invitations
	.Request()
	.AddAsync(invitation);
