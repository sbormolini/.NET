#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

#### using named httpclients in asp.net core
source: https://www.youtube.com/shorts/_kx6exxgQqQ
source: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-7.0

#!csharp

using Microsoft.Net.Http.Headers;

var builder = WebApplication.CreateBuilder(args);

// add services to the container.

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() { Title = "WebApplication1", Version = "v1" });
});
builder.Services.AddHttpClient("GitHub", httpClient => 
{
    httpClient.BaseAddress = new Uri("https://api.github.com/");
    httpClient.DefaultRequestHeaders.Add(HeaderNames.Accept, "application/vnd.github.v3+json");
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();

#!markdown

#### Health checks in ASP.NET Core
ASP.NET Core offers Health Checks Middleware and libraries for reporting the health of app infrastructure components.
https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-8.0
code source: https://www.youtube.com/shorts/nVruJyL19A0

#!csharp

public class SqlHealthCheck(DbConnectionFactory dbConnectionFactory) : IHealthCheck
{
    public async Task<HealthCheckResult> CheckHealthAsync(
        HealthCheckContext context, 
        CancellationToken cancellationToken = default)
    {
        try
        {
            IDbConnection connection = dbConnectionFactory.OpenDbConnection();
            await connection.ExecuteScalarAsync("SELECT 1");

            return HealthCheckResult.Healthy();
        }
        catch (Exception ex)
        {
            return HealthCheckResult.Unhealthy(exception: ex);
        }
    }
}

#!markdown

#### Schedule Background Tasks with .NET 8
https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostoptions?view=dotnet-plat-ext-8.0
code source: https://www.youtube.com/shorts/n4tzpRB2lzc

#!csharp

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddHostedService<Worker>();
builder.Services.AddHostedService<BlobService>();
builder.Services.AddHostedService<ServerTimeNotifier>();

builder.Services.Configure<HostOptions>(options =>
{
    options.ServicesStartConcurrently = true;
    options.ServicesStopConcurrently = true;
});
