#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

# What Is Span<T>?
System.Span<T> is a new value type at the heart of .NET. It enables the representation of contiguous regions of arbitrary memory, regardless of whether that memory is associated with a managed object, is provided by native code via interop, or is on the stack. And it does so while still providing safe access with performance characteristics like that of arrays.

https://learn.microsoft.com/en-us/dotnet/api/system.span-1?view=net-7.0<br>
https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay

#!csharp

// For example, you can create a Span<T> from an array:

var arr = new byte[10];
Span<byte> bytes = arr; // Implicit cast from T[] to Span<T>

#!csharp

// Create a span over an array.
var array = new byte[100];
Span<byte> arraySpan = new(array);

byte data = 0;
for (int ctr = 0; ctr < arraySpan.Length; ctr++)
    arraySpan[ctr] = data++;

int arraySum = 0;
foreach (var value in array)
    arraySum += value;

Console.WriteLine($"The sum is {arraySum}");
// Output:  The sum is 4950

#!csharp

using System.Runtime.InteropServices;

var random = new Random(420);
var items = Enumerable.Range(0, 100).Select(x => random.Next()).ToList();

Span<int> listAsSpan = CollectionsMarshal.AsSpan(items);
ref var searchSpace = ref MemoryMarshal.GetReference(listAsSpan);
for (var i = 0; i < listAsSpan.Length; i++)
{
    var item = Unsafe.Add(ref searchSpace, i);
    Console.WriteLine(item);
}

#!markdown

##### C# 11.0 new features: Span<char> pattern matching
Source: https://endjin.com/blog/2023/04/dotnet-csharp-11-pattern-matching-span-char

#!csharp

string name = "Lobby Lud";

Console.WriteLine(name switch
{
    "Lobby Lud" => "I claim my five pounds",
    "What?" => "Who?",
    _ => throw new ArgumentException("Invalid name")
});

#!csharp

string substring = name[1..5]; // Allocates a new string on the GC heap
ReadOnlySpan<char> substringSpan = name.AsSpan[1..5];
Console.WriteLine(substring)

#!csharp

if (name.SequenceEqual("Lobby Lud"))
{
    Console.WriteLine("I claim my five pounds");
}

#!csharp

ReadOnlySpan<byte> textUtf8 = "Hello"u8;
if (textUtf8.SequenceEqual("Hello"u8))
{
    Console.WriteLine("Match");
}

#!markdown

Split string operation 
source code: @StasYaknenko

#!csharp

string email = "sandro.bormolini@test.local";

#!csharp

var domain = email.Split('@').ElementAtOrDefault(1);
if (domain is null)
{
    throw new ArgumentException("Invaild email");
}
return domain;

#!csharp

var emailAsSpan = email.AsSpan();
var atIndex = emailAsSpan.IndexOf('@');
if (atIndex == -1)
{
    throw new ArgumentException("Invaild email");
}
return emailAsSpan[(atIndex + 1)..].ToString();
