#!markdown

Simple delegate samples

Source: abukakmeh.com

#!csharp

var hello = () => Console.WriteLine("Sali ");

hello += () => Console.WriteLine("Basel ");
hello += () => Console.WriteLine(".NET und I!");

hello();

// output:
// Sali Basel, .NET und I!

#!markdown

Exception Filters to allow catch blocks targeting specific exceptions.

Source: abukakmeh.com

#!csharp

using System.Net;

try
{
    var client = new HttpClient();
    var result  = await client.GetAsync("https://httpstat.us/404");
    result.EnsureSuccessStatusCode();
}
catch (HttpRequestException hre) when (hre.StatusCode == HttpStatusCode.NotFound)
{
    Console.WriteLine("Oh no not found!");
}

#!markdown

What is deconstruct in C#?
Deconstruction is a process of splitting a variable value into parts and storing them into new variables. 
This could be useful when a variable stores multiple values such as a tuple. Let's take a look at the code sample in Listing 1. In this code, method GetATuple returns a tuple with three values.

Source: abukakmeh.com

#!csharp

var (year, month, day) = DateTime.Now;
Console.WriteLine($"It's now {day} {month} {year}!");

public static class DateTimeExtensions
{
    // Deconstruct name is important
    public static void Deconstruct(this DateTime dateTime, out int year, out int month, out int day) =>
        (year, month, day) = (dateTime.Year, dateTime.Month, dateTime.Day);
}

#!markdown

Minimal APIs service
Minimal APIs use ASP.NET Core dependency injection services to manages dependencies. You can register services with varyjing lifetimes, such a transient, scoped or singleton.

Source: abukakmeh.com

#!csharp

var builder = WebApplication.CreateBuiler(args);

// register service for use in endpoints
// scoped : created for each incoming reqzest
builder.Services.AddScoped<MyService>();
var app = builder.Build();

// my service injected using ASP.NET Core DI
app.MapGet("/",(MyService myService) => myService.Hi);

app.Run();

public class MyService 
{
    public string Hi => "GrÃ¼ezi!";
}

#!markdown

Pattern matching in C# allows matching on things that implement ITuple

Source: https://twitter.com/19481808/status/1507043438037909504

#!csharp

{
    object o = new Person();
    
    if (o is var (name, age))
    {
        Console.WriteLine($"Name: {name}, Age: {age}");
    }
}

{
    object o = new Person();
    
    if (o is (string name, int age))
    {
        Console.WriteLine($"Name: {name}, Age: {age}");
    }
}

class Person : ITuple
{
    public object? this[int index] => index switch 
    {
        0 => "SomeName",
        1 => 35,
        _ => null
    };

    public int Length => 2;
}

#!markdown

Explore lazy initialization in .NET, a performance improvement that means an object creation is deferred until the object is first used

#!csharp

// target type expression for defining lazy

private static readonly Lazy<Font> = FontValue = new(() => {
    FontCollection collcetion = new();
    var familiy = collection.Add("./assets/FontName.ttf");
    return familiy.CreateFont(FontSize, FontStyle.Bold);
});

#!markdown

Represents the largest possible value of an Int32. This field is constant.
https://docs.microsoft.com/en-us/dotnet/api/system.int32.maxvalue?view=net-6.0

Represents the smallest possible value of Int32. This field is constant.
https://docs.microsoft.com/en-us/dotnet/api/system.int32.minvalue?view=net-6.0

#!csharp

// arbitary
var large = 1_000_000;

// top most limiz of int
var largest = int.MaxValue;

// bottom most limiz of int
var smallest = int.MinValue;

#!markdown

Anonymous Types
https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types

#!csharp

// anonymous type
var v = new { 
    Amount = 108, 
    Message = "Hello" 
};

// Rest the mouse pointer over v.Amount and v.Message in the following
// statement to verify that their inferred types are int and string.
Console.WriteLine(v.Amount + v.Message);

#!csharp

var productQuery =
    from prod in products
    select new { prod.Color, prod.Price };

foreach (var v in productQuery)
{
    Console.WriteLine("Color={0}, Price={1}", v.Color, v.Price);
}

#!csharp

var anonArray = new[] { new { name = "apple", diam = 4 }, new { name = "grape", diam = 1 }};

#!markdown

define class that lets callers subscribe to an event in c#
https://dotnet.github.io/orleans/docs/tutorials_and_samples/tutorial_1.html

#!csharp

// version 1
class MyThing
{
    public event Action OnThing { get; set; }

    public void DoThing()
    {
        OnThing?.Invoke();
    }
}

#!csharp

// version 2
class MyThing
{
    private List<Action> _subscribers = new();

    public void DoThing()
    {
        foreach (var s in _subscribers)
        {
            s();
        }
    }

    public void Subscribe(Action callback)
    {
        _subscribers.Add(callback);
    }

    public void Unsubscribe(Action callback)
    {
        _subscribers.Remove(callback);
    }
}

#!csharp

// version 3

interface IThingSubscriber
{
    void OnThingDone();
}

class MyThing
{
    private List<IThingSubscriber> _subscribers = new();

    public void DoThing()
    {
        foreach (var s in _subscribers)
        {
            s.OnThingDone();
        }
    }

    public void Subscribe(IThingSubscriber subscriber)
    {
        _subscribers.Add(subscriber);
    }

    public void Unsubscribe(IThingSubscriber subscriber)
    {
        _subscribers.Remove(subscriber);
    }
}

#!markdown

Discard Arguments

#!csharp

using static System.Diagnostics.Process;

//dont need or want the value
var isNumber = int.TryParse("one", out var _);
Console.WriteLine(isNumber);

// dont need these args
var process = Start("ping", "localhost -c 1");
process.Exited += (_, _) => Console.WriteLine("done!");
await process.WaitForExitAsync();

#!markdown

Caching in .NET applications
https://docs.microsoft.com/en-us/dotnet/api/system.runtime.caching?view=dotnet-plat-ext-6.0

The cache provides you mechanisms to cache and expires in-memory objects for improved preformance and memory management.

#!csharp

// #nuget System.Runtime.Caching
using System.Runtime.Caching;
using static System.DateTimeOffset;

var cache = MemoryCache.Default;

cache.Add(
    key: "91346c29-45b4-4420-9d08-1b5f793f88f9",
    value: "{\"name\":\"John\", \"age\":30, \"car\":null}",
    absoluteExpiration: Now.AddSeconds(60)
);

#!markdown

Writing to a file
https://docs.microsoft.com/en-us/dotnet/api/system.io?view=net-6.0

#!csharp

using System.IO;
using static System.IO.FileMode;

using var file = File.Open("test.txt", OpenOrCreate);

using var writer = new StreamWriter(file);

await writer.WriteLineAsync("This is a test");

#!markdown

# Cancel Running Tasks
Long-running tasks may never end on their own.
To stop a task, you ca use "CancellationTokenSource" and CancelleationToken".

https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=net-6.0
https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource?view=net-6.0

#!csharp

using static System.Console;

var source = new CancellationTokenSource();
var token = source.Token;

Task.Run(async () => {
    while(true)
    {
        WriteLine("RUNNING");
        var wait = TimeSpan.FromSeconds(1);
        await Task.Delay(wait, token);
    }
}, token);

ReadKey();
// stop running the task
source.Cancel();
WriteLine("Cancelled!");
ReadKey();

#!markdown

# uri builder
The UriBuilder class provides a convenient way to modify the contents of a Uri instance without creating a new Uri instance for each modification.
The UriBuilder properties provide read/write access to the read-only Uri properties so that they can be modified.

https://docs.microsoft.com/en-us/dotnet/api/system.uribuilder?view=net-6.0

#!csharp

var host = "www.contosoe.com";
var port = 80;
var page = "default.html";
var qs = "records=10";

// string
string path = $"https://{host}:{port}/{page}?{qs}";
//path => https://www.contosoe.com:80/default.html?records=10

// uribuilder
UriBuilder baseUri = new("https", host, 80, page, qs);
//baseUri.Host => www.contosoe.com
//baseUri.Port => 80
//baseUri.Query => ?records=10
//baseUri => https://www.contosoe.com:80/default.html?records=10

#!markdown

# Filters in Minimal API apps
Minimal API filters allow developers to implement business logic that supports:

Running code before and after the endpoint handler.
Inspecting and modifying parameters provided during an endpoint handler invocation.
Intercepting the response behavior of an endpoint handler.
Filters can be helpful in the following scenarios:

Validating the request parameters and body that are sent to an endpoint.
Logging information about the request and response.
Validating that a request is targeting a supported API version.

#!csharp

var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

string ColorName(string color) => $"Color specified: {color}!";

app.MapGet("/colorSelector/{color}", ColorName)
    .AddEndpointFilter(async (invocationContext, next) =>
    {
        var color = invocationContext.GetArgument<string>(0);

        if (color == "Red")
        {
            return Results.Problem("Red not allowed!");
        }
        return await next(invocationContext);
    });

app.Run();
