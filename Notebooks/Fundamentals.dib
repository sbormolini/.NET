#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["F#","f#"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"},{"aliases":["frontend"],"name":"vscode"}]}}

#!markdown

Simple delegate samples

Source: abukakmeh.com

#!csharp

var hello = () => Console.WriteLine("Sali ");

hello += () => Console.WriteLine("Basel ");
hello += () => Console.WriteLine(".NET und I!");

hello();

// output:
// Sali Basel, .NET und I!

#!markdown

Exception Filters to allow catch blocks targeting specific exceptions.

Source: abukakmeh.com

#!csharp

using System.Net;

try
{
    var client = new HttpClient();
    var result  = await client.GetAsync("https://httpstat.us/404");
    result.EnsureSuccessStatusCode();
}
catch (HttpRequestException hre) when (hre.StatusCode == HttpStatusCode.NotFound)
{
    Console.WriteLine("Oh no not found!");
}

#!markdown

What is deconstruct in C#?
Deconstruction is a process of splitting a variable value into parts and storing them into new variables. 
This could be useful when a variable stores multiple values such as a tuple. Let's take a look at the code sample in Listing 1. In this code, method GetATuple returns a tuple with three values.

Source: abukakmeh.com

#!csharp

var (year, month, day) = DateTime.Now;
Console.WriteLine($"It's now {day} {month} {year}!");

public static class DateTimeExtensions
{
    // Deconstruct name is important
    public static void Deconstruct(this DateTime dateTime, out int year, out int month, out int day) =>
        (year, month, day) = (dateTime.Year, dateTime.Month, dateTime.Day);
}

#!markdown

Minimal APIs service
Minimal APIs use ASP.NET Core dependency injection services to manages dependencies. You can register services with varyjing lifetimes, such a transient, scoped or singleton.

Source: abukakmeh.com

#!csharp

var builder = WebApplication.CreateBuiler(args);

// register service for use in endpoints
// scoped : created for each incoming reqzest
builder.Services.AddScoped<MyService>();
var app = builder.Build();

// my service injected using ASP.NET Core DI
app.MapGet("/",(MyService myService) => myService.Hi);

app.Run();

public class MyService 
{
    public string Hi => "GrÃ¼ezi!";
}

#!markdown

Pattern matching in C# allows matching on things that implement ITuple

Source: https://twitter.com/19481808/status/1507043438037909504

#!csharp

{
    object o = new Person();
    
    if (o is var (name, age))
    {
        Console.WriteLine($"Name: {name}, Age: {age}");
    }
}

{
    object o = new Person();
    
    if (o is (string name, int age))
    {
        Console.WriteLine($"Name: {name}, Age: {age}");
    }
}

class Person : ITuple
{
    public object? this[int index] => index switch 
    {
        0 => "SomeName",
        1 => 35,
        _ => null
    };

    public int Length => 2;
}

#!markdown

Explore lazy initialization in .NET, a performance improvement that means an object creation is deferred until the object is first used

#!csharp

// target type expression for defining lazy

private static readonly Lazy<Font> = FontValue = new(() => {
    FontCollection collcetion = new();
    var familiy = collection.Add("./assets/FontName.ttf");
    return familiy.CreateFont(FontSize, FontStyle.Bold);
});

#!markdown

Represents the largest possible value of an Int32. This field is constant.
https://docs.microsoft.com/en-us/dotnet/api/system.int32.maxvalue?view=net-6.0

Represents the smallest possible value of Int32. This field is constant.
https://docs.microsoft.com/en-us/dotnet/api/system.int32.minvalue?view=net-6.0

#!csharp

// arbitary
var large = 1_000_000;

// top most limiz of int
var largest = int.MaxValue;

// bottom most limiz of int
var smallest = int.MinValue;

#!markdown

Anonymous Types
https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types

#!csharp

// anonymous type
var v = new { 
    Amount = 108, 
    Message = "Hello" 
};

// Rest the mouse pointer over v.Amount and v.Message in the following
// statement to verify that their inferred types are int and string.
Console.WriteLine(v.Amount + v.Message);

#!csharp

var productQuery =
    from prod in products
    select new { prod.Color, prod.Price };

foreach (var v in productQuery)
{
    Console.WriteLine("Color={0}, Price={1}", v.Color, v.Price);
}

#!csharp

var anonArray = new[] { new { name = "apple", diam = 4 }, new { name = "grape", diam = 1 }};

#!markdown

define class that lets callers subscribe to an event in c#
https://dotnet.github.io/orleans/docs/tutorials_and_samples/tutorial_1.html

#!csharp

// version 1
class MyThing
{
    public event Action OnThing { get; set; }

    public void DoThing()
    {
        OnThing?.Invoke();
    }
}

#!csharp

// version 2
class MyThing
{
    private List<Action> _subscribers = new();

    public void DoThing()
    {
        foreach (var s in _subscribers)
        {
            s();
        }
    }

    public void Subscribe(Action callback)
    {
        _subscribers.Add(callback);
    }

    public void Unsubscribe(Action callback)
    {
        _subscribers.Remove(callback);
    }
}

#!csharp

// version 3

interface IThingSubscriber
{
    void OnThingDone();
}

class MyThing
{
    private List<IThingSubscriber> _subscribers = new();

    public void DoThing()
    {
        foreach (var s in _subscribers)
        {
            s.OnThingDone();
        }
    }

    public void Subscribe(IThingSubscriber subscriber)
    {
        _subscribers.Add(subscriber);
    }

    public void Unsubscribe(IThingSubscriber subscriber)
    {
        _subscribers.Remove(subscriber);
    }
}

#!markdown

Discard Arguments

#!csharp

using static System.Diagnostics.Process;

//dont need or want the value
var isNumber = int.TryParse("one", out var _);
Console.WriteLine(isNumber);

// dont need these args
var process = Start("ping", "localhost -c 1");
process.Exited += (_, _) => Console.WriteLine("done!");
await process.WaitForExitAsync();

#!markdown

Caching in .NET applications
https://docs.microsoft.com/en-us/dotnet/api/system.runtime.caching?view=dotnet-plat-ext-6.0

The cache provides you mechanisms to cache and expires in-memory objects for improved preformance and memory management.

#!csharp

// #nuget System.Runtime.Caching
using System.Runtime.Caching;
using static System.DateTimeOffset;

var cache = MemoryCache.Default;

cache.Add(
    key: "91346c29-45b4-4420-9d08-1b5f793f88f9",
    value: "{\"name\":\"John\", \"age\":30, \"car\":null}",
    absoluteExpiration: Now.AddSeconds(60)
);

#!markdown

Writing to a file
https://docs.microsoft.com/en-us/dotnet/api/system.io?view=net-6.0

#!csharp

using System.IO;
using static System.IO.FileMode;

using var file = File.Open("test.txt", OpenOrCreate);

using var writer = new StreamWriter(file);

await writer.WriteLineAsync("This is a test");

#!markdown

# Cancel Running Tasks
Long-running tasks may never end on their own.
To stop a task, you ca use "CancellationTokenSource" and CancelleationToken".

https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=net-6.0
https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource?view=net-6.0

#!csharp

using static System.Console;

var source = new CancellationTokenSource();
var token = source.Token;

Task.Run(async () => {
    while(true)
    {
        WriteLine("RUNNING");
        var wait = TimeSpan.FromSeconds(1);
        await Task.Delay(wait, token);
    }
}, token);

ReadKey();
// stop running the task
source.Cancel();
WriteLine("Cancelled!");
ReadKey();

#!markdown

# uri builder
The UriBuilder class provides a convenient way to modify the contents of a Uri instance without creating a new Uri instance for each modification.
The UriBuilder properties provide read/write access to the read-only Uri properties so that they can be modified.

https://docs.microsoft.com/en-us/dotnet/api/system.uribuilder?view=net-6.0

#!csharp

var host = "www.contosoe.com";
var port = 80;
var page = "default.html";
var qs = "records=10";

// string
string path = $"https://{host}:{port}/{page}?{qs}";
//path => https://www.contosoe.com:80/default.html?records=10

// uribuilder
UriBuilder baseUri = new("https", host, 80, page, qs);
//baseUri.Host => www.contosoe.com
//baseUri.Port => 80
//baseUri.Query => ?records=10
//baseUri => https://www.contosoe.com:80/default.html?records=10

#!markdown

# Filters in Minimal API apps
Minimal API filters allow developers to implement business logic that supports:

Running code before and after the endpoint handler.
Inspecting and modifying parameters provided during an endpoint handler invocation.
Intercepting the response behavior of an endpoint handler.
Filters can be helpful in the following scenarios:

Validating the request parameters and body that are sent to an endpoint.
Logging information about the request and response.
Validating that a request is targeting a supported API version.

#!csharp

var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

string ColorName(string color) => $"Color specified: {color}!";

app.MapGet("/colorSelector/{color}", ColorName)
    .AddEndpointFilter(async (invocationContext, next) =>
    {
        var color = invocationContext.GetArgument<string>(0);

        if (color == "Red")
        {
            return Results.Problem("Red not allowed!");
        }
        return await next(invocationContext);
    });

app.Run();

#!markdown

Beginning with C# 11, the interpolated expressions can include newlines. The text between the { and } must be valid #csharp, therefore it can include newlines that improve readability
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated

#!csharp

int safetyScore = 91;

string message = $"The usage policy for {safetyScore} is {
    safetyScore switch
    {
        > 90 => "Unlimited usage",
        > 80 => "General usage, with daily safety check",
        > 70 => "Issues must be adresses within 1 week",
        > 50 => "Issues must be adresses within 1 day",
        _ => "Issues must be addressed before continued use",
    }
}";

Console.WriteLine(message); 

#!markdown

# Enhanced Pattern Matching
C#9 enhances pattern matching with additional keywords: and, or, & not.
You can build powerful pattern-matching expressions combined with the "is" keyword.<br>
Source: @buhakmeh

https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/pattern-matching 

#!csharp

var value = 'k';
var result = IsLetterOrSeperator(value);

// k : True
Console.WriteLine($"{value} : {result}");

bool IsLetterOrSeperator(char c) => 
    c is (>= 'a' and <= 'z') 
    or (>= 'A' and <= 'Z')
    or '.'
    or ','
    and not ' ';

#!markdown

# Exception and Stack Traces
You need to be careful when re-throwing exceptions.<br>
Throwing an exception explicitly reset the stack trace and can make it difficult to track down the real issue.<br>
Source: @buhakmeh

#!csharp

try { A(); }
catch (Exception e)
{
    throw e;
}

static void A() => B();
static void B() => C();
static void C() => throw new NotImplementedException();

#!markdown

### AsyncLocal< T > Class<br>
Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.<br>
Sources:<br>
https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task?view=net-6.0
https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-6.0

#!csharp

var local = new AsyncLocal<int>();

Console.WriteLine($"Before: {local.Value}");
await Bleed();
Console.WriteLine($"After: {local.Value}");

Task Bleed()
{
    local.Value = 10;
    return Task.CompletedTask;
}

#!markdown

### Out Parameters
Out parameters allow you to return conditional values to the caller.<br>
Here you can see a string being parsed and its integer value is used to ouput the result.<br>
Source: @buhakmeh<br>
<br>
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier

#!csharp

using static System.Console;

// use the out value if result
// when the string value
// is successfully parsed
if (int.TryParse("42", out var result))
{
    WriteLine($"the answer is {result}");
}

#!markdown

### Expression Bodied Members
When creating get-only convenience members that rely on toher properties in your object, consider using expression-bodied members.
Significantly reduce noise in your type declarations.
Source: @buhakmeh<br>
<br>
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members

#!csharp

var noRobot = new Person("Sandro", "Bormolini");

Console.WriteLine(noRobot.FullName);

// new implementation
public record Person(string FirstName, string LastName)
{
    public string FullName => $"{FirstName} {LastName}";
}

/* old
public record Person(string FirstName, string LastName)
{
    public string FullName { 
        get { return $"{FirstName} {LastName}" }
    }
}
*/

#!markdown

### ClientWebSocket upgrade response details
ClientWebSocket previously did not provide any details about upgrade response. However, the information about response headers and status code might be important in both failure and success scenarios.

dotnet/runtime#25918
https://github.com/dotnet/runtime/issues/25918

#!csharp

ClientWebSocket ws = new();
ws.Options.CollectHttpResponseDetails = true;
try
{
    await ws.ConnectAsync(uri, default);
    // success scenario
    ProcessSuccess(ws.HttpResponseHeaders);
    ws.HttpResponseHeaders = null; // clean up (if needed)
}
catch (WebSocketException)
{
    // failure scenario
    if (ws.HttpStatusCode != null)
    {
        ProcessFailure(ws.HttpStatusCode, ws.HttpResponseHeaders);
    }
}

#!markdown

### System.Math
Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.<br>
https://docs.microsoft.com/en-us/dotnet/api/system.math?view=net-7.0 
<br>
Code source: @buhakmeh<br>
<br>

#!csharp

using static System.Console;
using static System.Math;

var inches = 12;
var radius = inches / 2;
var pizza = (PI * Pow(radius, 2));

// results
WriteLine($"You have {pizza:00.00} inÂ²");

#!markdown

### sealed class
When applied to a class, the sealed modifier prevents other classes from inheriting from it. Should be applied by default! Also benefits from performance improvments.<br>
Reference: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed<br>
Source: https://www.youtube.com/watch?v=d76WWAD99Yo&t=1s (Nick Chapsas)<br>

#!csharp

public class BaseClass
{
    public virtual void ExampleVoidMethod() {}
    public virtual int ExampleIntMethod() => 0;
}

public class OpenClass : BaseClass
{
    public override void ExampleVoidMethod() {}
    public override int ExampleIntMethod() => 69;
}

// better performance, use as default
public sealed class SealedClass : BaseClass
{
    public override void ExampleVoidMethod() {}
    public override int ExampleIntMethod() => 420;
}

#!markdown

### Iterate List
Gets a Span<T> view over the data in a list. Items should not be added or removed from the List<T> while the Span<T> is in use.<br>
Source: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.collectionsmarshal.asspan?view=net-6.0<br>
Code source: https://www.youtube.com/watch?v=jUZ3VKFyB-A (Nick Chapsas)

#!csharp

Random rng  = new(420);
int size = 100;
List<int> _items;

_items = Enumerable.Range(1, size).Select(x => rng.Next()).ToList();

// for loop
for (var i = 0; i < _items.Count; i++)
{
    var item = _items[i];
}

// foreach
foreach (var item in _items)
{

}

// foreach lower
List<int>.Enumerator enumerator = _items.GetEnumerator();
try
{
    while (enumerator.MoveNext())
    {
        int current = enumerator.Current;
    }
}
finally
{
    ((IDisposable)enumerator).Dispose();
}

// parallel foreach
Parallel.ForEach(_items, i => {});

// parallel linq
_items.AsParallel().ForAll(i => {});

// foreach span
foreach (var item in CollectionMarshal.AsSpan(_items))
{

}

// for span
var asSpan = CollectionMarshal.AsSpan(_items);
for (var i = 0; i < asSpan.Length; i++)
{
    var item = asSpan[i];
}

#!markdown

### Initalize empty enumerables
Use Enumerable.Empty to initialize an enumerable variable to an empty collection.
<br><br>
Source: https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.empty?view=net-6.0<br>
Code source: @buhakmeh

#!csharp

// dont
IEnumerable<int> integers = null;

// do
IEnumerable<int> numbers = Enumerable.Empty<int>();

// safe access
Console.WriteLine(numbers.Count());

#!markdown

#### Date and Time in C#
Using datetime provider to test code using date and time
https://learn.microsoft.com/en-us/dotnet/api/system.datetime?view=net-7.0
<br><br>
Code source: https://www.youtube.com/watch?v=5DrGdyxnO5A (Nick Chapsas)

#!csharp

// how to test code?

public interface IDateTimeProvdier
{
    public DateTimeOffset Now { get; }
}

pulbic class DateTimeProvider : IDateTimeProvdier
{
    public DateTimeOffset Now  => DateTimeOffset.Now;
}

public class GreeterService
{
    private readonly DateTimeProvider _dateTimeProvider;

    public GreeterService (IDateTimeProvider dateTimeProvider)
    {
        _dateTimeProvider = dateTimeProvider;
    }

    public string GenereateGreetText()
    {
        var dateTimeNow = DateTimeOffset.Now;
        return dateTimeNow.Hour switch
        {
            >= 5 and < 12 => "Morning",
            >= 12 and < 18 => "Good afternoon",
            _ => "Good evening"
        };
    }
}

#!markdown

#### Math.Clamp
Returns value clamped to the inclusive range of min and max.
<br><br>
Source: https://learn.microsoft.com/en-us/dotnet/api/system.math.clamp?view=net-6.0<br>
Code source: @buhajmeh<br>

#!csharp

var extreme = 1000;
var result = Math.Clamp(extreme, 1, 100);

// result is 100
Console.WriteLine(result);

#!markdown

#### CultureInfo TextInfo.ToTitleCase(String)
Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).
<br><br>
Source: https://learn.microsoft.com/en-us/dotnet/api/system.globalization.textinfo.totitlecase?view=net-6.0<br>
Code source: @buhajmeh<br>

#!csharp

using static System.Console;
using static System.Globalization.CultureInfo;

var name = "sandro bormolini";

var info = GetCultureInfo("de-ch").TextInfo;
var result = info.ToTitleCase(name);

WriteLine(result);

#!markdown

#### catch when expression
https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/keywords/try-catch<br>
Code source: @MilanJovanovic

#!csharp

using System.Net;
using System.Net.Http;

var httpClient = new HttpClient();

try 
{
    await httpClient.PutAsync("update-dotnet-tips", tip);
}
catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.BadRequest)
{
    // handle 400 bad request
}
catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.NotFound)
{
    // handle 404 not found
}
catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.Conflict)
{
    // handle 409 conflict
}

#!markdown

Code source: @davidpine7
<br><br>
When iterating with foreach, you can select the index using the Select extension overload. In this example, we deconstruct the index and value, writing them to the console while employing C# 11 raw string literals.

#!csharp

using System;
using System.Linq;

string[] numberNames = {"one", "two", "three", "four"};

foreach (var (index, name) in numberNames.Select((n, i) => (i, n)))
{
    Console.WriteLine($"Index {index}, Value: {name}");
}

#!markdown

#### Using records for Data Transfer Objects (DTO)<br>
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record<br>
https://learn.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-5<br>

#!csharp

// class
public record ProductResponseAsClass
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Category { get; set; }
    public decimal Price { get; set; }
    public int Quantitiy { get; set; }
}

// record
public record ProductResponseAsRecord(
    int Id,
    string Name, 
    string Category,
    decimal Price,
    int Quantitiy
);

#!markdown

Adding Microseconds and Nanoseconds to TimeStamp, DateTime, DateTimeOffset, and TimeOnly<br>
https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-4/

#!csharp

DateTime demo = DateTime.Now;

Console.WriteLine($"Ticks: {demo.Ticks}");
Console.WriteLine($"Microseconds: {demo.Microsecond}");
Console.WriteLine($"Nanoseconds: {demo.Nanosecond}");

#!markdown

TarFile Class
https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar?view=net-7.0
https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar.tarfile?view=net-7.0

#!csharp

using System.Formats.Tar;

// create tar file
TarFile.CreateFromDirectory(
    @"C:\Temp\Demo\Source",
    @"C:\Temp\Demo\Demo.tar",
    false);

// extract tar file
TarFile.ExtractToDirectory(
    @"C:\Temp\Demo\Demo.tar",
    @"C:\Temp\Demo\Extracted",
    false);

#!markdown

### Code Readability improvments
#### Target typed new expression
Code Source: @MilanJovanovic

#!csharp

var dictionary = new Dictionary<string, List<int>>()
{
    { "one-two", new List<int> {1, 2} },
    { "one-two-three", new List<int> {1, 2, 3} },
};

#!csharp

Dictionary<string, List<int>> dictionary = new()
{
    { "one-two", new() {1, 2} },
    { "one-two-three", new() {1, 2, 3} },
};

#!markdown

#### inline using statement

#!csharp

using System.IO;

public void DoWork()
{
    using (var memoryStream = new MemoryStream())
    {
        // do work with memoryStream
    }
}

#!csharp

using System.IO;

public void DoWork()
{
    using var memoryStream = new MemoryStream();
    // do work with memoryStream
}

#!markdown

#### logic operator

#!csharp

var number = 69;
if (number == 1 || number == 3)
{
    Console.WriteLine("Number is 1 or 3");
}

#!csharp

var number = 69;
if (number is 1 or 3)
{
    Console.WriteLine("Number is 1 or 3");
}

#!csharp

var number = 69;
if (number >= 10 && number <= 25)
{
    Console.WriteLine("Between 10 and 25.");
}

#!csharp

var number = 69;
if (number is >= 10 and <= 25)
{
    Console.WriteLine("Between 10 and 25.");
}

#!markdown

#### type check

#!csharp

record RacingCar(int Id, string Name);

RacingCar car = new(1, "Fast");

if (!(car is RacingCar))
{
    Console.WriteLine("Car is not racing car");
}

#!csharp

record RacingCar(int Id, string Name);

RacingCar car = new(1, "Fast");

if (car is not RacingCar)
{
    Console.WriteLine("Car is not racing car");
}

#!markdown

#### Task.WhenAll
https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.whenall?view=net-7.0<br>
Code Source: @MilanJovanovic

#!csharp

public async Task CallMultipleApis()
{
    await CallFirstApiAsync();
    await CallSecondApiAsync();
    await CallThirdApiAsync();
}

#!csharp

public async Task CallMultipleApis()
{
    await Task.WhenAll(
        CallFirstApiAsync(),
        CallSecondApiAsync(),
        CallThirdApiAsync());
}

#!markdown

#### Extension Methods (C# Programming Guide)
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods<br>
source code: @marcominerva

#!csharp

(var firstName, var lastName) = ("Sandro", "Bormolini");
var fullName = (firstName, lastName).Concatenate();
Console.WriteLine(fullName);

public static class TupleExtension
{
    public static string Concatenate(this (string First, string Second) input) => $"{input.First} {input.Second}";
}

#!markdown

https://learn.microsoft.com/en-us/dotnet/standard/events/
https://learn.microsoft.com/en-us/dotnet/api/system.action-1?view=net-7.0
source code: hachyderm.io/@davidfowl

#!csharp

class Game
{
    public Action<GameStartedEvent> GameStarted { get; set; }
    public Action<GameCompletedEvent> GameCompleted { get; set; }
    public Action<QuestionEvent> OnQuestion { get; set; }

    public void Run() { }
}

class QuestionEvent
{
    public Question Question { get; init; }
    public Answer Answer { get; set; }
    public bool Quit { get; set; }
}

public record GameStartedEvent(string Name);
public record GameCompletedEvent(string Winner);
public record Question(string Text);
public record Answer(string? Line);

void Events(Game game)
{
    game.GameStarted += e => { Console.WriteLine($"Welcome to {e.Name}"); };

    game.GameCompleted += e => { Console.WriteLine($"The winner is {e.Winner}"); };

    game.OnQuestion += e => { 
        var question = e.Question; 
        Console.WriteLine(question.Text);
        var line = Console.ReadLine();
        if (line is null)
        {
            // exit the entire flow
            e.Quit = true;
        }
        else
        {
            e.Answer = new Answer(line);
        }
    };

    game.Run();
}

#!markdown

#### Simply null argument assertions
https://learn.microsoft.com/en-us/dotnet/api/system.argumentnullexception.throwifnull?view=net-7.0<br>
Code source: @MilanJovanovic

#!csharp

public void UsefulMethod(object obj)
{
    if (obj is null)
    {
        throw new ArgumentNullException(nameof(obj));
    }
}

public void UsefulMethodSimplified(object obj)
{
    ArgumentNullException.ThrowIfNull(obj);
}

#!markdown

##### Efficiently check for duplicates in a collection
Code source: @MilanJovanovic

#!csharp

public static bool ContainsDuplicates<T>(this IEnumerable<T> enumerable)
{
    HashSet<T> knownElements = new();
    foreach (T element in enumerable)
    {
        if (!knownElements.Add(element))
        {
            return true;
        }
    }

    return false;
}

// usage
List<int> numbers = new() {1, 2, 3, 4, 4 , 5};
if (numbers.ContainsDuplicates())
{
    // do something when there are duplicates
}

#!markdown

##### How to use expression-body constructors
Code source: @MilanJovanovic

#!csharp

public class person
{
    public string Name { get; }
    public int Age { get; }

    public Person(string name, int age)
    {
        Name = name;
        Age = age;
    }
}

#!csharp

public class person
{
    public string Name { get; }
    public int Age { get; }

    public Person(string name, int age) => (Name, Age) = (name, age);
}

#!markdown

##### DateOnly and TimeOnly
https://learn.microsoft.com/en-us/dotnet/api/system.dateonly?view=net-7.0<br>
https://learn.microsoft.com/en-us/dotnet/api/system.timeonly?view=net-7.0<br>
Code source: @MilanJovanovic

#!csharp

DateOnly todayDate = new(2022, 1, 20);
DateOnly currentUtcDate = DateOnly.FromDateTime(DateTime.UtcNow);

#!csharp

// sample constructors
//public TimeOnly(int hour, int minute)
//public TimeOnly(int hour, int minute, int second)
//public TimeOnly(int hour, int minute, int second, int millisecond)

TimeOnly nineInTheMorning = new TimeOnly(9,0);

TimeOnly currentUtcTime = TimeOnly.FromDateTime(DateTime.UtcNow);

#!markdown

##### Non-destructive mutation
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-expression
Code source: @MilanJovanovic

#!csharp

// Banana is an immutable anonymous object
var banana = new
{
    Name = "Banana",
    Price = 120.0
};

// But you can create a new instance using the with expression
var orange = banana with 
{
    Name = "Orange"
};

Console.WriteLine($"Name: {banana.Name}, Price: {banana.Price}");
Console.WriteLine($"Name: {orange.Name}, Price: {orange.Price}");

#!markdown

#### eager exepctions in iterator block with local functions
Code source: @MilanJovanovic

#!csharp

public IEnumerable<string> SequenceToLowercase(IEnumerable<string> input)
{
    if (!input.Any())
        throw new ArgumentException("The sequence is empty");

    return input.Select(ToLowercase);

    static string ToLowercase(string val) => val.ToLower();
}

#!markdown

#### lock statement - ensure exclusive access to a shared resource
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock<br>
Code source: @MilanJovanovic

#!csharp

private static readonly _lockObject = new();

public void ResourceIntensiveMethod()
{
    lock(_lockObject)
    {
        DoSomeWork();
    }
}

#!markdown

#### Minimal APIs quick reference
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0

#!csharp

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/", () => "Hello World!");

app.Run();

#!markdown

##### Minimal API create JWT
source: https://www.youtube.com/shorts/W2qXebrLg_Q

#!csharp

// source: https://www.youtube.com/shorts/W2qXebrLg_Q

using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using WebApplication1;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapPost("/login", ([FromBody]Login login) =>
{
    var claimsIdentity = new ClaimsIdentity(new Claim[]
    {
        new Claim(JwtRegisteredClaimNames.Sub, login.UserName),
        new Claim(JwtRegisteredClaimNames.Email, login.Email)
    });

    var key = "90f02bdcc69311ed9c6be23fd29e7eee";
    var encodedKey = Encoding.ASCII.GetBytes(key);

    var tokenDescriptor = new SecurityTokenDescriptor()
    {
        Subject = claimsIdentity,
        Expires = DateTime.Now.AddHours(2),
        Audience = "Postman",
        Issuer = "Me",
        SigningCredentials = new SigningCredentials(
            new SymmetricSecurityKey(encodedKey),
            SecurityAlgorithms.HmacSha256Signature)
    };

    var tokenHandler = new JwtSecurityTokenHandler();
    var token = tokenHandler.CreateToken(tokenDescriptor);
    var jwt = tokenHandler.WriteToken(token);
    return Results.Ok(new LoginResponse { token = jwt });
});

app.Run();

#!markdown

##### .NET Simple Json serialization samples
https://www.youtube.com/shorts/6E9BTi21IgY<br>
https://learn.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializer?view=net-8.0<br>
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record<br>

#!csharp

using System.Text.Json;

var user = new User("Sandro", "Bormolni");

var jsonString = JsonSerializer.Serialize(user);
Console.WriteLine(jsonString);

var newUser = JsonSerializer.Deserialize<User>(jsonString);
Console.WriteLine(newUser);

record User (string FirstName, string LastName);

#!markdown

#### CSV with CsvHelper
Source: https://www.youtube.com/shorts/oWC9VIXafsQ

#!csharp

using System.Globalization;
using CsvHelper;
using CsvProcessing;

using (var writer = new StreamWriter("product.csv"))
{
    using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
    {
        csv.WriteRecords(Product.GetProducts());
    }
}

using (var reader = new StreamWriter("product.csv"))
{
    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
    {
        var records = csv.GetRecords<Product>();
        foreach (var record in records)
        {
            Console.WriteLine(record);
        }
    }
}

#!markdown

##### Ulid
Ulid is sortable, random id generator<br>
Ulid = order + uniqueness<br>
https://github.com/Cysharp/Ulid<br>
https://www.nuget.org/packages/Ulid<br>
Code source: @StasYakhnenko

#!csharp

#r "nuget:Ulid,1.2.6"

var firstId = Ulid.NewUlid();
Console.WriteLine(firstId);

await Task.Delay(1000);

var secondId = Ulid.NewUlid();
Console.WriteLine(secondId);

#!markdown

#### asp.net rewrite rules
https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.rewrite.rewriteoptions?view=aspnetcore-7.0<br>
Source Code: @StasYakhnenko

#!csharp

var rewrite = new RewriteOptions()
    .AddRewrite("help-articles", "help", true)
    .AddRedirect("help-desk", "help")
    .AddRedirect("help-articels/(.*)", "help/$1");

app.UseRewriter(rewrite);

#!markdown

#### required Modifier
The required modifier indicates that the field or property it's applied to must be initialized by an object initializer. Any expression that initializes a new instance of the type must initialize all required members.
Source: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/required

#!csharp

public class Person
{
    public Person() { }

    [SetsRequiredMembers]
    public Person(string firstName, string lastName) =>
        (FirstName, LastName) = (firstName, lastName);

    public required string FirstName { get; init; }
    public required string LastName { get; init; }

    public int? Age { get; set; }
}

public class Student : Person
{
    public Student() : base()
    {
    }

    [SetsRequiredMembers]
    public Student(string firstName, string lastName) :
        base(firstName, lastName)
    {
    }

    public double GPA { get; set; }
}

#!markdown

#### Member access operators and expressions - the dot, indexer, and invocation operators.
##### Null-conditional operators ?. and ?[]
A null-conditional operator applies a member access, ?., or element access, ?[], operation to its operand only if that operand evaluates to non-null; otherwise, it returns null.

Source code: @MilanJovanovic

#!csharp

class User
{
    public string Name;
    public Subscription Subscription;
}

class Subscription
{
    public string Name;
    public void Renew()
    {
        Console.WriteLine("Subscription renewd");
    }
}

User user = new() {
    Name = "Hans",
    Subscription = new() {
        Name = "Basic"
    }
};


// without
if (user is not null && user.Subscription is not null)
{
    user.Subscription.Renew();
}

// with null-conditional operator
user?.Subscription?.Renew();

#!markdown

#### Random Class
https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-8.0

#!csharp

Random random = new();

for (int i = 0; i < 10; i++)
{
    double d = random.NextDouble() * 5 + 155;
    Console.WriteLine($"Value: {temp}");
}

#!markdown

#### Mapping domain object
Source: https://www.youtube.com/shorts/7H8j04t34cY

#!csharp

public class Person
{
    public Guid Id {get; set;}
    public string FirstName {get; set;}
    public string LastName {get; set;}
    public string Email {get; set;}
    public string ProfilePhotoUrl {get; set;}
}

public class PersonDetails
{
    public Guid Id {get; set;}
    public string Name {get; set;}
    public string Email {get; set;}
    public string ProfilePhotoUrl {get; set;}

    public static PersonDetails CreateFromPerson(Person person)
    {
        return new PersonDetails
        {
            Id = person.Id,
            Name = $"{person.FirstName} {person.FirstName}",
            Email = person.Email,
            ProfilePhotoUrl = person.ProfilePhotoUrl
        };
    }
}

#!markdown

#### Prettify json object
https://learn.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializeroptions?view=net-7.0
code source: https://www.youtube.com/shorts/pWMTPMk0UyI

#!csharp

using System.Text.Json;

public class Person
{
    public Guid Id {get; set;}
    public string FirstName {get; set;}
    public string LastName {get; set;}
    public string Email {get; set;}
    public string ProfilePhotoUrl {get; set;}
}

public class PersonDetails
{
    public Guid Id {get; set;}
    public string Name {get; set;}
    public string Email {get; set;}
    public string ProfilePhotoUrl {get; set;}

    public static PersonDetails CreateFromPerson(Person person)
    {
        return new PersonDetails
        {
            Id = person.Id,
            Name = $"{person.FirstName} {person.FirstName}",
            Email = person.Email,
            ProfilePhotoUrl = person.ProfilePhotoUrl
        };
    }

    public override string ToString()
    {
        var options = new JsonSerializerOptions{WriteIndented = true};
        return JsonSerializer.Serialize(this);
    }
}

#!markdown

#### Difference Int / Decimal
https://learn.microsoft.com/en-us/dotnet/api/system.decimal?view=net-8.0
https://learn.microsoft.com/en-us/dotnet/api/system.int32?view=net-8.0

#!csharp

static int Calculate()
{
    return (int) ((0.7 + 0.1) * 10);
}

Console.WriteLine(Calculate());

#!csharp

static decimal Calculate()
{
    return (decimal) ((0.7 + 0.1) * 10);
}

Console.WriteLine(Calculate());

#!markdown

#### Implementation of Singleton class via lazy loading in .NET
https://learn.microsoft.com/en-us/dotnet/api/system.lazy-1?view=net-8.0
<br>
The Lazy<T> class in .NET is a thread-safe wrapper around a value that is initialized only when it is first accessed. This class is useful when the creation of the value is expensive or when the value is not always needed during the lifetime of an object. By deferring the initialization until the first access, the Lazy<T> class helps to reduce the startup time and memory usage of an application.
<br>
code source: @MuhamamdWaseem

#!csharp

// origin
public sealed class Singleton
{
    private static Singleton? Instance = null;
    private static readonly object lockThread = new();
    
    private Singleton() {}
    public static Singleton GetInstance
    {
        get
        {
            lock(lockThread)
            {
                if (Instance == null)
                {
                    Instance = new();
                }
                return Instance;
            }
        }
    }

}

#!csharp

// lazy implementation
public sealed class Singleton
{
    private static readonly Lazy<Singleton> lazy = new(() => new());
    public static Singleton Instance { get { return lazy.Value; } }
    
    private Singleton() {}
}

#!markdown

#### Generate Random strings
https://github.com/bchavez/Bogus

#!csharp

// Generate random string
static string GenerateRandomStringv1(int length)
{
    var random = new Random();
    const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    return new string(Enumerable.Repeat(chars, length)
        .Select(s => s[random.Next(s.Length)]).ToArray());
}

#!csharp

// code source: https://www.youtube.com/shorts/7cQ7-E_DKsY
// @Codewrinkles
static string GenerateRandomStringv2(int length)
{
    string random = string.Empty;
    Enumerable.Range(48, 75)
        .Where(i => i < 58 || i > 64 && i < 91 || i > 96)
        .OrderBy(o => new Random().Next())
        .ToList().ForEach(i => random += Convert.ToChar(i));

    return random.Substring(new Random().Next(0, random.Length - length), length);
}

#!csharp

Console.WriteLine(GenerateRandomStringv2(10));

#!markdown

#### GetAwaiter().GetResult()
https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.taskawaiter.getresult?view=net-7.0
code source: @BelloneDavide

#!csharp

public class TestMachine 
{
    public async Task<string> GetDataAsync()
    {
        return await Task.FromResult("Hello World");
    }
}

TestMachine engine = new();

// With .Result exeptions are wrapped insie an AggregateException
try
{
    _ = engine.GetDataAsync().Result;
}
catch (EncoderFallbackException e)
{
    // gets ignored
}
catch (AggregateException ae)
{
    // falls here
}

// With .GetAwaiter().GetResult() exeptions are correctly handled
try
{
    _ = engine.GetDataAsync().GetAwaiter().GetResult();
}
catch (EncoderFallbackException ex)
{
    // correctly falls here
}

#!markdown

#### Merge nested IFs in into one condition 

#!csharp

if (!string.IsNullOrEmpty(user.Name))
{
    if (user.Age > 18)
    {
        if (user.HasLicense)
        {
            // do something
        }
    }   
}

#!csharp

if (!string.IsNullOrEmpty(user.Name) && user.Age > 18 && user.HasLicense)
{
    // do something
}

#!markdown

### Parsing
https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-other<br>
https://learn.microsoft.com/en-us/dotnet/api/system.iparsable-1?view=net-7.0<br>
source code: https://www.youtube.com/watch?v=lqbYURwM0bw

#!csharp

var numberAsText = "1234";

var numberAsInt = int.Parse(numberAsText);
var numberAsDouble = double.Parse(numberAsText);

Console.WriteLine(numberAsInt);
Console.WriteLine(numberAsDouble);

#!csharp

// .net 8 implementation

var numberAsText = "6,9".AsSpan();
var point2d = Point2d.Parse(numberAsText);
Console.WriteLine(point2d);

public static class ParsableExtensions
{
    public static T Parse<T>(this string input, IFormatProvider? formatProvider = null) where T : IParsable<T>
    {
        return T.Parse(input, formatProvider);
    }
}

public record Point2d(int X, int Y) : ISpanParsable<Point2d>
{
    public static Point2d Parse(ReadOnlySpan<char> text, IFormatProvider? provider = null)
    {
        Span<Range> dest = stackalloc Range[2];
        var splitText = text.Split(',', dest);
        var x = int.Parse(text[dest[0]], provider);
        var y = int.Parse(text[dest[1]], provider);
        return new Point2d(x, y);
    }

    public static bool TryParse(ReadOnlySpan<char> text, IFormatProvider? provider, out Point2d result)
    {
        try
        {
            Span<Range> dest = stackalloc Range[2];
            var splitText = text.Split(',', dest);
            var x = int.Parse(text[dest[0]], provider);
            var y = int.Parse(text[dest[1]], provider);
            result = new Point2d(x, y);
            return true;
        }
        catch
        {
            result = new Point2d(0, 0);
        }
    }
}

#!markdown

##### HashSet<T> Class
The HashSet<T> class provides high-performance set operations. A set is a collection that contains no duplicate elements, and whose elements are in no particular order.
https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-7.0

#!csharp

HashSet<int> evenNumbers = new HashSet<int>();
HashSet<int> oddNumbers = new HashSet<int>();

for (int i = 0; i < 5; i++)
{
    // Populate numbers with just even numbers.
    evenNumbers.Add(i * 2);

    // Populate oddNumbers with just odd numbers.
    oddNumbers.Add((i * 2) + 1);
}

Console.Write("evenNumbers contains {0} elements: ", evenNumbers.Count);
DisplaySet(evenNumbers);

Console.Write("oddNumbers contains {0} elements: ", oddNumbers.Count);
DisplaySet(oddNumbers);

// Create a new HashSet populated with even numbers.
HashSet<int> numbers = new HashSet<int>(evenNumbers);
Console.WriteLine("numbers UnionWith oddNumbers...");
numbers.UnionWith(oddNumbers);

Console.Write("numbers contains {0} elements: ", numbers.Count);
DisplaySet(numbers);

void DisplaySet(HashSet<int> collection)
{
    Console.Write("{");
    foreach (int i in collection)
    {
        Console.Write(" {0}", i);
    }
    Console.WriteLine(" }");
}

/* This example produces output similar to the following:
* evenNumbers contains 5 elements: { 0 2 4 6 8 }
* oddNumbers contains 5 elements: { 1 3 5 7 9 }
* numbers UnionWith oddNumbers...
* numbers contains 10 elements: { 0 2 4 6 8 1 3 5 7 9 }
*/

#!markdown

#### Global Error Handling in .NET
In .NET 5+, the recommended approach to implement global error handling is using middleware.
code source: Stefan Dokic
additional sources: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0 

#!csharp

public class ExceptionMiddleware 
{
    private readonly RequestDelegate _next;
    public ExceptionMiddleware(RequestDelegate next)
    {
        _next = next;
    }
    public async Task InvokeAsync(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (Exception error)
        {
            var response = context.Response;
            response.ContentType = "application/json";

            Console.WriteLine($"Error: {error.Message}");
            Console.WriteLine($"Error Details: {context.Request.Path}");

            // handle Exception

            // return statuscode, message, details
            await response.WriteAsync("Error"); 
        }
    }
}

#!markdown

#### Null != Empty
Return null:

â¢ Possible NullReferenceException 
â¢ We always need to check for null
â¢ Slow Performance

Return an empty collection:

â¢ Don't need to check for null
â¢ Good Performance

You should apply this to every collection type.

source: Stefan Dokic

#!csharp

// dont return null
public IEnumerable<string> GetNames()
{
    return null;
}

// return emtpy collection
public IEnumerable<string> GetNames()
{
    return Enumerable.Empty<string>();
}

#!markdown

#### dictonary keys are case sensitive
https://learn.microsoft.com/en-us/dotnet/api/system.collections.specialized.stringdictionary.containskey?view=net-7.0
https://learn.microsoft.com/en-us/dotnet/api/system.stringcomparer.ordinalignorecase?view=net-7.0
source: https://www.youtube.com/shorts/Dsi0I080pKA @MilanJovanovicTech

#!csharp

var dictionary = new Dictonary<string, object>(StringComparer.OrdinalIgnoreCase)
{
    { "key1", 1 },
    { "key2", 2 },
    { "key3", 3 } 
};

if (dictionary.ContainsKey("key1"))
{
    Console.WriteLine("Value found");
}

if (dictionary.ContainsKey("KEY1"))
{
    Console.WriteLine("Value also found");
}

#!markdown

##### ArraySegment<T> Struct
https://learn.microsoft.com/en-us/dotnet/api/system.arraysegment-1?view=net-7.0
source: https://www.youtube.com/watch?v=MGCNS6s6e5o @nickchapsas

#!csharp

var names = new[]
{
    "Emily Thompson",
    "Alexander Johnson",
    "Jessica Brown",
    "Anthony Davis",
    "Katherine Wilson",
    "Michael Moore",
    "Vanessa Jones",
    "Robert Smith",
    "Isabel Garcia",
    "William Martinez"
};

//var sliceOfNames = names.Skip(2).Take(3);
//var sliceOfNames = names.AsSpan().Slice(0, 2);
var segmentOfNames = new ArraySegment<string>(names, 0, 3);

foreach (var name in sliceOfNames)
{
    Console.WriteLine($"Name was: {name}");
}

#!markdown

Pattern matching
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/pattern-matching
code source: https://www.youtube.com/shorts/Av-fv9EOrnw @MilanJovanovicTech

#!csharp

var engineer = new SoftwareEngineer();

if (!engineer.KnowsCSharp && 
    engineer.KnowsJava && 
    engineer.ProgrammingLanguages.Count > 3)
{
    Console.WriteLine("Engineer does not know C# ");
}

// pattern matching
if (engineer is 
    {
        KnowsCSharp: false,  
        KnowsJava: true,
        ProgrammingLanguages.Count: > 3
    })
{
    Console.WriteLine("Engineer does not know C# ");
}

#!csharp

var engineer = new SoftwareEngineer();

if (engineer.KnowsCSharp || 
    engineer.KnowsJava)
{
    Console.WriteLine("Must be coder");
}

// pattern matching more verbose it this case 
// source: https://www.youtube.com/shorts/fQ6PlbvYGH4
if (engineer is { KnowsCSharp: true } or
                { KnowsJava: true })
{
    Console.WriteLine("Must be coder!");
}

#!markdown

Validate Applicaiton Settings with Data Annotations
https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-7.0
https://learn.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validation-with-the-data-annotation-validators-cs
code source: https://www.youtube.com/shorts/KUhAclofBoY @MilanJovanovicTech

#!csharp

public sealed class GitHubSettings
{
    public const string ConfigurationSectionName = "GitHub";

    [Required, Url]
    public string BaseAddress { get; init; }

    [Required]
    public string AccessToken { get; init; }

    [Required]
    public string UserAgent { get; init; }
}

// apply
builder.Services.AddOptions<GitHubSettings>()
    .BindConfiguration(GitHubSettings.ConfigurationSectionName)
    .ValidateDataAnnotations();
    .ValidateOnStart();

#!markdown

Can't use the C# out paramter in this case
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/method-parameters#out-parameter-modifier
code source: https://www.youtube.com/shorts/OAPYd6SKbW4 @MilanJovanovicTech

#!csharp

static bool TryCreate(
    Stream json, 
    out SoftwareEngineer? engineer)
{
    engineer = JsonSerializer
        .Deserialize<SoftwareEngineer>(json);

    return engineer is not null;
}

// can't use out on async methods
static async Task<bool> TryCreateAsync(
    Stream json, 
    out SoftwareEngineer? engineer) // error : remove out param and convert Task<bool> into tuple or return object
{
    engineer = await JsonSerializer
        .DeserializeAsync<SoftwareEngineer>(json);

    return engineer is not null;
}

#!markdown

#### Enum parsing
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/enums
https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse?view=net-7.0
code source: https://www.youtube.com/watch?v=VENbpXhGUZM

#!csharp

public enum DaysOfWeek
{
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
}

var didParse1 = Enum.TryParse<DaysOfWeek>("monday", out var tryParse1);
Console.WriteLine($"{tryParse1}, {didParse1}");

var didParse2 = Enum.TryParse<DaysOfWeek>("tuesday", ignoreCase: true, out var tryParse2);
Console.WriteLine($"{tryParse2}, {didParse2}");

var didParse3 = Enum.TryParse<DaysOfWeek>("Friday", ignoreCase: false, out var tryParse3);
Console.WriteLine($"{tryParse3}, {didParse3}");

#!markdown

#### Guard Clauses
https://www.c-sharpcorner.com/article/guards-in-net/#:~:text=In%20simple%20language%20we%20can%20say%20that%20the,the%20GetStudent%20method%20against%20any%20null%20_student%20arguments.
Source code: https://www.youtube.com/shorts/QsFBpReY0hI

#!csharp

public static class Ensure
{
    public static void NotNullOrEmpty(
        [NotNull] string? value, 
        [CallerArgumentExpression("value")] string? paramName = null)
    {
        if (string.IsNullOrEmpty(value))
        {
            throw new ArgumentException("Value cannot be null or empty", paramName);
        }
    }
}

// usage
public sealed record Name
{
    public Name(string? value)
    {
        Ensure.NotNullOrEmpty(value);
        Value = value;
    }
    
    public string Value { get; }
}

#!markdown

#### Activator Class
Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects.
source: https://learn.microsoft.com/en-us/dotnet/api/system.activator.createinstance?view=net-8.0
Source code: https://www.youtube.com/shorts/3Ec-TS96xCE

#!csharp

internal class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Category { get; set; }
    public decimal Price { get; set; }
    public int Quantity { get; set; }

    public override string ToString() => $"Id: {Id}, Name: {Name}, Category: {Category}, Price: {Price}, Quantity: {Quantity}";
}

var product = new Product();

var productType = typeof(Product);

var productViaReflection = Activator.CreateInstance(productType);

#!markdown

#### Linq get max values object
https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregate?view=net-8.0
https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby?view=net-8.0
source code: https://www.youtube.com/shorts/f7aKQkdsHf8

#!csharp

var food = new[]
{
    new Product { Id = 1, Name = "Apple", Category = "Fruit", Price = 1.20M, Quantity = 10 },
    new Product { Id = 2, Name = "Banana", Category = "Fruit", Price = 1.40M, Quantity = 20 },
    new Product { Id = 3, Name = "Orange", Category = "Fruit", Price = 1.60M, Quantity = 30 },
    new Product { Id = 4, Name = "Pineapple", Category = "Fruit", Price = 1.80M, Quantity = 40 },
    new Product { Id = 5, Name = "Strawberry", Category = "Fruit", Price = 2.00M, Quantity = 50 },
};

// sort
var priciest1 = food
    .OrderByDescending(x => x.Price)
    .First();

// aggregate
var priciest2 = food
    .Aggregate((pr, next) => pr.Price > next.Price ? pr : next);

// maxby
var priciest3 = food
    .MaxBy(x => x.Price);

public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Category { get; set; }
    public decimal Price { get; set; }
    public int Quantity { get; set; }

    public override string ToString() => $"Id: {Id}, Name: {Name}, Category: {Category}, Price: {Price}, Quantity: {Quantity}";
}

#!markdown

### Map Lists
https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.convertall?view=net-8.0
source code: https://www.youtube.com/shorts/LBrabwNYY4Q

#!csharp

var engineers = GetEngineers();

// method 1
var enginnerV1 = new List<SoftwareEngineerDTO>();
foreach (var engineer in engineers)
{
    enginnerV1.Add(new SoftwareEngineerDTO(engineer));
}

// method 2
var enginnerV2 = engineers
    .Select(engineer => new SoftwareEngineerDTO(engineer))
    .ToList();

// method 3
var enginnerV3 = engineers
    .ConvertAll(engineer => new SoftwareEngineerDTO(engineer));

class SoftwareEngineer
{
    public SoftwareEngineer() { }

    public string Name { get; set; }
    public string Email { get; set; }
    public DateOnly DateOfBirth { get; set; }
    public string ProgrammingLanguage { get; set; }
}

class SoftwareEngineerDTO
{
    public SoftwareEngineerDTO(SoftwareEngineer engineer)
    {
        Name = engineer.Name;
        Email = engineer.Email;
        ProgrammingLanguage = engineer.ProgrammingLanguage;
    }

    public SoftwareEngineerDTO() { }

    public string Name { get; set; }
    public string Email { get; set; }
    public string ProgrammingLanguage { get; set; }
}

#!markdown

#### Record with
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record
Source code: https://www.youtube.com/shorts/tRytBhgbD6I

#!csharp

var exam = new Exam(Grades.A);

var newExam = exam with { Grade = Grades.B };

record Exam(Grades Grade);
enum Grades { A, B, C, D, E, F };

#!markdown

#### Expression Body Constructors in C# 
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members
code source: https://www.youtube.com/shorts/OqTEuQ0PeGU

#!csharp

public class User
{
    // public User(int id, string name)
    // {
    //     Id = id;
    //     Name = name;
    // }

    // Expression Body Constructors, does not scale above two parameters
    public User(int id, string name) => 
        (Id, Name) = (id, name);

    public int Id { get; }
    public string Name { get; }
}
