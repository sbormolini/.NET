#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["frontend"],"name":"vscode"}]}}

#!markdown

EF Core: Buffering / Streaming
https://learn.microsoft.com/en-us/ef/core/

#!csharp

// source code: @StasYakhnenko

// buffering; all the data is located at once
public async Task FetchCustomerBuffered()
{
    var customers = await _context
        .Customers.AsNoTracking()
        .Where(x => x.LastActivityDate =< targetDate)
        .ToListAsync();

    foreach (var customer in customers)
    {
        // do task
    }
}

#!csharp

// source code: @StasYakhnenko

// streaming; singel result each time
public async Task FetchCustomerStreaming()
{
    var customers = _context
        .Customers.AsNoTracking()
        .Where(x => x.LastActivityDate =< targetDate)
        .AsAsyncEnumerable();

    foreach (var customer in customers)
    {
        // do task
    }
}

#!markdown

##### Multiple DbContext
https://learn.microsoft.com/en-us/ef/core/dbcontext-configuration/<br>

Here are a few scenarios of why you would want to create multiple DbContexts.
- Multiple databases
- Separating concerns
- Modular monolith

source: milan jovanovic

#!csharp

public class CatalogDbContext : DbContext
{
    public DbSet<Product> Products { get; set; }
    public DbSet<Category> Categories { get; set; }
}

public class CatalogDbContext : DbContext
{
    public DbSet<Product> Products { get; set; }
    public DbSet<Category> Categories { get; set; }
}

#!markdown

#### Bulk operation EF Core 7.0
https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-7.0/whatsnew
Source code: @StasYakhnenko

#!csharp

// Bulk update
await _context
    .Customers
    .Where(x => x.LastActivityDate =< _activityDateThreshold)
    .ExecuteUpdateAsync(x => x.SetProperty(n => n.IsActive, true));

// Bulk delete
await _context
    .Customers
    .Where(x => x.DeletedAt =< DateTime.UtcNow.AddDays(-90))
    .ExecuteDeleteAsync();

#!markdown

#### Simple Bulk Delete with EF Core 7
https://www.learnentityframeworkcore.com/bulk-extensions#:~:text=EF%20Core%20Bulk%20Delete%20Extensions,BulkDelete(customer)%3B
Source code: milan jovanovic

#!csharp

// merthod syntax
dbContext.Posts.Where(p => p.Impressions < 1000).ExecuteDelete();

// sql syntax
DELETE FROM Posts p WHERE p.Impressions < 1000;

#!markdown

#### Enable EF Core Logging
source: @MilanJovanovicTech
https://www.youtube.com/shorts/xy_yBZ3nwXg

#!csharp

public class CatalogDbContext : DbContext
{
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.LogTo(
        action: Console.WriteLine,
        minimumLevel: LogLevel.Information);
    }

    public DbSet<Product> Products { get; set; }
    public DbSet<Category> Categories { get; set; }
}

#!markdown

#### Configure Database Default values
<br>
Sources:<br>
https://www.youtube.com/shorts/xJS_5L7cZHA @MilanJovanovicTech<br>
https://learn.microsoft.com/en-us/ef/core/modeling/

#!csharp

using Domain.Customers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Persistence.Configurations;

internal class CustomerConfiguration :  IEntityTypeConfiguraiotn<Customer>
{
    public void Configure(EntityTypeBuilder<Customer> builder)
    {
        builder.HasKey(c => c.Id);

        builder.Property(c => c.Id).HasConversion(
            customerId => customerId.Value,
            value => new CustomerId(value));

        builder.Property(c => c.Name)
            .HasMaxLenght(100)
            .HasDefaultValue("N/A"); // default value

        builder.Property(c => c.Email).HasMaxLenght(255);

        builder.HasIndex(c => c.Email).IsUnique();    
    }
}

#!markdown

#### Optimistic locking with EF concurrency token
Sources:<br>
https://www.youtube.com/shorts/d0jkXt9pAPg @MilanJovanovicTech<br>
https://learn.microsoft.com/en-us/ef/core/saving/concurrency?tabs=data-annotations

#!csharp

public class ProductConfiguration : IEntityTypeConfiguration<Product>
{
    public void Configure(EntityTypeBuilder<Product> builder)
    {
        builder.HasKey(p => p.Id);

        builder.HasMany(p => p.Categories);

        builder.Navigation(p => p.Categories).AutoInclude();

        builder.Property(p => p.Price).IsConcurrencyToken();
    }
}
