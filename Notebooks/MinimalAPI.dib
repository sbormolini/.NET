#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

#### Minimal APIs 
Minimal APIs are a simplified approach for building fast HTTP APIs with ASP.NET Core. You can build fully functioning REST endpoints with minimal code and configuration. Skip traditional scaffolding and avoid unnecessary controllers by fluently declaring API routes and actions. For example, the following code creates an API at the root of the web app that returns the text, "Hello World!". <br>
Source: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/overview?view=aspnetcore-7.0

#!csharp

var builder = WebApplication.CreateBuiler(args);

// register service for use in endpoints
// scoped : created for each incoming reqzest
builder.Services.AddScoped<MyService>();
var app = builder.Build();

// my service injected using ASP.NET Core DI
app.MapGet("/",(MyService myService) => myService.Hi);

app.Run();

public class MyService 
{
    public string Hi => "Gr√ºezi!";
}

#!markdown

#### Middleware in Minimal API apps

Middleware allows you to introduce additional logic before or after executing an HTTP request.

There are three approaches to creating middleware:
- With Request Delegates
- By Convention
- Factory-Based
<br><br>
Source: Milan Jovanovic
<br>
Addtional: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/middleware?view=aspnetcore-7.0

#!csharp

var builder = WebApplication.CreateBuiler(args);

var app = builder.Build();

// my service injected using ASP.NET Core DI
app.Use(async (context, next) => 
{
    // add code before request

    await next(context);

    // add code after request
});

#!markdown

#### Implement API Idempotency

Idempotency is a concept that is important to understand when making API requests. Idempotent requests are requests that can be made multiple times but they get the same response. This means that they do not affect the server in a way that will change the subsequent response.

source: https://www.youtube.com/shorts/eXBX9ubqqJg

#!csharp

app.MapPost("products", async(
    CreateProductRequest request,
    [FromHeader(Name = "X-Idempotency-Key")]
    string requestId,
    ISender senser) => 
{
    if (!Guid.TryParse(requestId, out Guid parsedRequestId))
    {
        return Results.BadRequest();
    }

    var command = new CreateProductCommand(
        parsedRequestId,
        request.Name,
        request.Sku,
        request.Price,
        request.Amount
    );

    await sender.Send(command);
    
    return Results.Ok();
});

#!markdown

#### RateLimiterOptionsExtensions.AddTokenBucketLimiter
RateLimiterOptionsExtensions.AddTokenBucketLimiter is a method in the Microsoft.AspNetCore.RateLimiting namespace that registers a new TokenBucketRateLimiter with the given TokenBucketRateLimiterOptions to the application. The limiter can be added to an endpoint via RequireRateLimiting<TBuilder> (TBuilder, String), or via the EnableRateLimitingAttribute12.<br>
<br>
The TokenBucketRateLimiter is a rate limiter that uses a token bucket algorithm to limit the number of requests that can be made over a period of time. The algorithm works by maintaining a bucket of tokens that are refilled at a fixed rate. Each request consumes one token from the bucket. If there are no tokens left in the bucket, the request is rejected.<br>
<br>
Sources:
https://www.youtube.com/shorts/iE6uOxTSz4c @MilanJovanovicTech
https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.ratelimiting.ratelimiteroptionsextensions.addtokenbucketlimiter?view=aspnetcore-7.0

#!csharp

rateLimiterOptions.AddTokenBucketLimiter(
    "token",
    options => {
        options.TokenLimit = 100;
        options.ReplenishPeriod = TimeSpan.FromMinutes(1);
        options.TokenPerPeriod = 10;
        options.QueueLimit = 5;
        options.QueueProcessingOrder.OldestFirst;
    });
